<project name="Eclipse SDK build" default="provision.sdk" basedir=".">
	<property name="baseBuilder" value="${basedir}/bootstrap" />
	<property name="launcher" value="${basedir}/bootstrap/plugins/org.eclipse.equinox.launcher.jar" />
	<property name="eclipse.pdebuild.scripts" value="${basedir}/bootstrap/plugins/org.eclipse.pde.build/scripts" />

	<property file="build.properties" />

	<available file="eclipse-${buildId}-fetched-src.tar.bz2" property="sdkSourcePresent" value="true" />
	<available file="eclipse-build-generatedScripts.tar.bz2" property="scriptsPresent" value="true" />
	<available file="eclipse-sdktests-${buildId}-fetched-src.tar.bz2" property="testsSourcePresent" value="true" />
	<available file="eclipse-sdktests-${buildId}-fetched-scripts.tar.bz2" property="testsScriptsPresent" value="true" />

	<!-- Check what has already been done -->
	<uptodate property="unpack.complete" srcfile="${basedir}/eclipse-${buildId}-fetched-src.tar.bz2" targetfile="unpack-stamp" />
	<uptodate property="testsunpack.complete" srcfile="${basedir}/eclipse-sdktests-${buildId}-fetched-src.tar.bz2" targetfile="testsunpack-stamp" />
	<uptodate property="buildId.complete" srcfile="unpack-stamp" targetfile="buildId-stamp" />
	<uptodate property="patch.complete" srcfile="unpack-stamp" targetfile="patch-stamp" />
	<uptodate property="testspatch.complete" srcfile="testsunpack-stamp" targetfile="testspatch-stamp" />
	<uptodate property="compilelibs.complete" srcfile="unpack-stamp" targetfile="compilelibs-stamp" />
	<uptodate property="build.complete" srcfile="patch-stamp" targetfile="build-stamp" />
	<uptodate property="p2prep.complete" srcfile="build-stamp" targetfile="p2prep-stamp" />
	<uptodate property="testsbuild.complete" srcfile="testspatch-stamp" targetfile="testsbuild-stamp" />
	<uptodate property="provision.sdk.complete" srcfile="build-stamp" targetfile="provision.sdk-stamp" />
	<uptodate property="provision.tests.complete" srcfile="testsbuild-stamp" targetfile="provision.tests-stamp" />
	<available file="bootstrap/plugins" property="bootstrapped" value="true" />

	<property name="topBuildDir" value="${basedir}/build"/>
	<property name="testsBuildDir" value="${basedir}/testsBuild"/>
	<property name="homeDir" value="${basedir}/home" />
	<property name="baseworkspace" value="${basedir}/baseworkspace" />
	<property name="buildworkspace" value="${basedir}/buildworkspace" />
	<property name="buildDirectory" value="${topBuildDir}/eclipse-${buildId}-fetched-src" />
	<property name="testsBuildDirectory" value="${testsBuildDir}/eclipse-sdktests-${buildId}-fetched-src" />
	<property name="buildConfigs" value="${buildDirectory}/buildConfigs" />
	<property name="buildConfig" value="${buildConfigs}/eclipse-build-config" />
	<property name="productFiles" value="${buildConfig}/productFiles" />
	<property name="reposource" value="${buildDirectory}/reposource" />
	<property name="testsBuildLabel" value="3.5"/>

	<property name="destDir" value="" />
	<property name="prefix" value="/usr/local" />
	<!-- Do we want /usr/lib64 if it's a 64-bit architecture? -->
	<property name="multilib" value="false" />
	<condition property="setLib64">
		<and>
			<istrue value="${multilib}" />
			<or>
				<!-- Is it a 64-bit architecture? -->
				<equals arg1="${buildArch}" arg2="x86_64" />
				<equals arg1="${buildArch}" arg2="ppc64" />
			</or>
		</and>
	</condition>

	<target name="setLib64Dir" if="setLib64">
		<property name="libDir" value="lib64" />
	</target>

	<target name="setLibDir" depends="setLib64Dir">
		<property name="libDir" value="lib" />
	</target>

	<target name="getInstallationDir" depends="setLibDir">
		<echo message="Installation directory will be ${destDir}/${prefix}/${libDir}"/>
	</target>

	<property name="doTests" value="true" />

	<target name="bootstrap" unless="bootstrapped">
		<ant inheritall="false" antfile="pdebuild.xml">
			<property name="buildId" value="${buildId}"/>
			<property name="buildArch" value="${buildArch}"/>
		</ant>
	</target>

	<!-- Run this target with antRunner application -->
	<target name="generateBuildXmls" depends="unpack">
		<ant antfile="pdebuild.xml" target="generateScripts"/>
	</target>

	<target name="fetch" unless="sdkSourcePresent">
		<fail message="SDK source tarball is not present.  Please either download a file such as eclipse-I20090611-1540-fetched-src.tar.bz2 from http://download.eclipse.org/technology/linuxtools/eclipse-build/ or generate one by running ./buildSDKSource.sh."/>
	</target>

	<target name="fetchTestSources" unless="testsSourcePresent">
		<fail message="SDK tests source tarball is not present.  Please either download a file such as eclipse-sdktests-I20090611-1540-fetched-src.tar.bz2 from http://download.eclipse.org/technology/linuxtools/eclipse-build/ or generate one by running ./buildSDKSource.sh."/>
	</target>

	<target name="fetchTestScripts" unless="testsScriptsPresent">
		<fail message="Scripts for the SDK tests tarball is not present.  Please either download a file such as eclipse-sdktests-I20090611-1540-fetched-scripts.tar.bz2 from http://download.eclipse.org/technology/linuxtools/eclipse-build/ or generate one by running ./buildSDKSource.sh." />
	</target>

	<target name="extractBuildXmls" if="scriptsPresent">
		<untar compression="bzip2" dest="${basedir}/build/eclipse-${buildId}-fetched-src"
			   src="${basedir}/eclipse-build-generatedScripts.tar.bz2"/>
		<!--
		<fail message="Build scripts to bootstrap PDE Build must be generated and present in eclipse-build-generatedScripts.tar.bz2.  See pdebuild.xml for details."/>
		-->
	</target>

	<target name="unpack" depends="fetch,setLibDir" unless="unpack.complete">
		<delete dir="${topBuildDir}" />
		<mkdir dir="${topBuildDir}" />

		<!-- User home used for build -->
		<delete dir="${homeDir}" />
		<mkdir dir="${homeDir}" />

		<!-- Workspaces used for build -->
		<delete dir="${baseworkspace}" />
		<mkdir dir="${baseworkspace}" />
		<delete dir="${buildworkspace}" />
		<mkdir dir="${buildworkspace}" />

		<echo message="Extracting SDK source (tar jxf eclipse-${buildId}-fetched-src.tar.bz2)" />
		<untar dest="${topBuildDir}" src="${basedir}/eclipse-${buildId}-fetched-src.tar.bz2" compression="bzip2" />
		<antcall target="extractBuildXmls"/>

		<delete dir="${buildDirectory}/buildConfigs" />
		<mkdir dir="${buildDirectory}/buildConfigs" />

		<echo message="Copying eclipse-build main feature source" />
		<copy todir="${buildConfigs}/eclipse-build-config">
			<fileset dir="eclipse-build-config"/>
		</copy>
		<echo message="Copying eclipse-build builder" />
		<copy todir="${buildDirectory}/features/eclipse-build-feature">
			<fileset dir="eclipse-build-feature"/>
		</copy>
		<!-- Create a stamp file -->
		<echo file="unpack-stamp" />
	</target>

	<target name="unpackTests" depends="fetchTestSources,fetchTestScripts" unless="testsunpack.complete">
		<delete dir="${testsBuildDir}" />
		<mkdir dir="${testsBuildDir}" />

		<!-- User home used for build -->
		<delete dir="${homeDir}" />
		<mkdir dir="${homeDir}" />

		<!-- Workspaces used for build -->
		<delete dir="${baseworkspace}" />
		<mkdir dir="${baseworkspace}" />
		<delete dir="${buildworkspace}" />
		<mkdir dir="${buildworkspace}" />

		<echo message="Extracting SDK tests source (tar jxf eclipse-sdktests-${buildId}-fetched-src.tar.bz2)" />
		<untar dest="${testsBuildDir}" src="${basedir}/eclipse-sdktests-${buildId}-fetched-src.tar.bz2" compression="bzip2" />
		<untar dest="${testsBuildDir}" src="${basedir}/eclipse-sdktests-${buildId}-fetched-scripts.tar.bz2" compression="bzip2" />
		<move todir="${testsBuildDir}">
			<fileset dir="${testsBuildDir}/eclipse-sdktests-${buildId}-fetched-scripts">
				<include name="**/*" />
			</fileset>
		</move>

		<!-- Create a stamp file -->
		<echo file="testsunpack-stamp" />
	</target>

	<target name="clean">
		<delete dir="${homeDir}" />
		<delete dir="${baseworkspace}" />
		<delete dir="${buildworkspace}" />
		<delete dir="${topBuildDir}" />
		<delete dir="configuration" />
		<delete dir="p2" />
		<delete dir="workspace" />
		<delete>
			<fileset dir="." includes="*-stamp" />
		</delete>
	</target>

	<target name="distclean" depends="clean">
		<delete dir="bootstrap/configuration/org.eclipse.core.runtime" />
		<delete dir="bootstrap/configuration/org.eclipse.equinox.app" />
		<delete dir="bootstrap/configuration/org.eclipse.osgi" />
		<delete dir="bootstrap/p2" />
		<delete dir="bootstrap/plugins" />
		<delete dir="bootstrap/workspace" />
	</target>

	<target name="insertBuildId" depends="unpack" unless="buildId.complete">
		<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@build@">
			<include name="**/about.mappings" />
		</replace>
		<replace dir="${buildDirectory}" value="${buildId}" token="@build@">
			<include name="**/configuration/config.ini" />
		</replace>
		<echo file="buildId-stamp"/>
	</target>

	<target name="applyPatches" depends="insertBuildId" unless="patch.complete">
		<patch patchfile="${basedir}/patches/eclipse-buildswtnatives.patch" dir="${buildDirectory}" strip="0" />
		<!-- See https://bugs.eclipse.org/bugs/show_bug.cgi?id=290064-->
		<patch patchfile="${basedir}/patches/eclipse-help-toolbar.patch" dir="${buildDirectory}" strip="0" />
		<patch patchfile="${basedir}/patches/eclipse-swt-buildagainstxulrunner.patch" dir="${buildDirectory}/plugins/org.eclipse.swt/Eclipse SWT PI/gtk/library" strip="3" />
		<patch patchfile="${basedir}/patches/donotstorebuildlogsinfiles.patch" dir="${buildDirectory}" strip="3" />
		<patch patchfile="${basedir}/patches/donotsetjavahomeandoptimizeliblocalfile.patch" dir="${buildDirectory}" strip="3" />
		<echo file="patch-stamp" />
	</target>

	<target name="applyTestPatches" depends="unpackTests" unless="testspatch.complete">
		<patch patchfile="${basedir}/patches/tests-noapttests.patch" dir="${testsBuildDirectory}/features/org.eclipse.sdk.tests" strip="0" />
		<echo file="testspatch-stamp" />
	</target>

	<target name="build" depends="applyPatches,bootstrap,compilelibs" unless="build.complete">
		<echo message="build.xml:  eclipse.pdebuild.scripts = ${eclipse.pdebuild.scripts}"/>
		<java classname="org.eclipse.equinox.launcher.Main"
		      fork="true"
		      dir="${basedir}"
		      failonerror="true">
			<classpath>
				<pathelement path="bootstrap/plugins/org.eclipse.equinox.launcher.jar" />
			</classpath>
			<arg line="-configuration configuration " />
			<arg line="-application org.eclipse.ant.core.antRunner " />
			<arg line="-buildfile ${eclipse.pdebuild.scripts}/build.xml" />
			<arg line="-propertyfile ${basedir}/build.properties " />
			<arg line="-Dbuilder=${buildConfig} " />
			<arg line="-DbuildDirectory=${buildDirectory} " />
			<arg line="-consolelog " />
		</java>
		<!--
		<ant antfile="build.xml" dir="${eclipse.pdebuild.scripts}">
			<property name="arch" value="${buildArch}"/>
			<property name="builder" value="${buildConfig}" />
		</ant>
-->
		<echo file="build-stamp" />
	</target>

	<!--
	<target name="checkBuildTests" depends="buildTests.check" if="buildTests.run">
	</target>

	<target name="buildTests.check">
		<condition property="buildTests.run">
			<and>
				<istrue value="${doTests}"/>
				<not>
					<istrue value="${testsbuild.complete}"/>
				</not>
			</and>
		</condition>
	</target>
	-->

	<target name="buildTests" depends="provision.sdk,applyTestPatches" unless="testsbuild.complete">
		<!-- Test framework -->
		<exec executable="${buildDirectory}/installation/eclipse">
			<arg line="-nosplash " />
			<arg line="-consolelog " />
			<arg line="-application org.eclipse.ant.core.antRunner " />
			<arg line="-buildfile ${eclipse.pdebuild.scripts}/build.xml" />
			<arg line="-propertyfile ${basedir}/build.properties " />
			<arg line="-DbuildDirectory=${testsBuildDirectory} " />
			<arg line="-Dtype=feature -Did=org.eclipse.test " />
			<arg line="-DbaseLocation=${buildDirectory}/installation " />
			<arg line="-DbuildLabel=${testsBuildLabel} " />
			<arg line="-data ${buildworkspace} " />
		</exec>
		<!-- SDK tests -->
		<exec executable="${buildDirectory}/installation/eclipse">
			<arg line="-nosplash " />
			<arg line="-consolelog " />
			<arg line="-application org.eclipse.ant.core.antRunner " />
			<arg line="-buildfile ${eclipse.pdebuild.scripts}/build.xml" />
			<arg line="-propertyfile ${basedir}/build.properties " />
			<arg line="-DbuildDirectory=${testsBuildDirectory} " />
			<arg line="-Dtype=feature -Did=org.eclipse.sdk.tests " />
			<arg line="-DbaseLocation=${buildDirectory}/installation " />
			<arg line="-DbuildLabel=${testsBuildLabel} " />
			<arg line="-data ${buildworkspace} " />
		</exec>
		<echo file="testsbuild-stamp" />
	</target>

	<target name="compilelibs" unless="compilelibs.complete">
		<!-- TODO: Reenable when libgnomeproxy build is fixed.
		<delete verbose="true">
			<fileset dir="${buildDirectory}/features/org.eclipse.equinox.executable">
				<include name="eclipse" />
			</fileset>
			<fileset dir="${buildDirectory}">
				<include name="**/*.so" />
			</fileset>
		</delete>-->
		<ant antfile="build.xml"
		     target="build.nativeLibraries"
		     dir="${buildDirectory}/plugins/org.eclipse.swt.gtk.linux.${buildArch}" />

		<property name="launcherlibs" value="${buildDirectory}/features/org.eclipse.equinox.executable" />
		<exec dir="${launcherlibs}/library/gtk/" executable="sh" failonerror="true">
			<arg line="build.sh" />
		</exec>

		<property name="launcherfragment" value="org.eclipse.equinox.launcher.gtk.linux.${buildArch}" />

		<copy file="${launcherlibs}/library/gtk/eclipse" todir="${buildDirectory}/features/org.eclipse.equinox.executable/bin/gtk/linux/${buildArch}/" />
		<copy todir="${buildDirectory}/plugins/${launcherfragment}">
			<fileset dir="${launcherlibs}/library/gtk">
				<include name="**/*.so" />
			</fileset>
		</copy>

		<!-- build liblocalfile -->
		<exec dir="${buildDirectory}/plugins/org.eclipse.core.filesystem/natives/unix/linux" executable="make" failonerror="true" />
		<move file="${buildDirectory}/plugins/org.eclipse.core.filesystem/natives/unix/linux/liblocalfile_1_0_0.so" todir="${buildDirectory}/plugins/org.eclipse.core.filesystem.linux.${buildArch}/os/linux/${buildArch}">
		</move>
		<!-- build libgnomeproxy -->
		<!-- TODO: Reenable when libgnomeproxy build is fixed.
		<exec dir="${buildDirectory}/plugins/org.eclipse.core.net/natives/unix/linux" executable="make" failonerror="true" />
		<copy file="${buildDirectory}/plugins/org.eclipse.core.net/natives/unix/linux/libgnomeproxy-1.0.0.so" todir="${buildDirectory}/plugins/org.eclipse.core.net.linux.${buildArch}/">
		</copy>
		<move file="${buildDirectory}/plugins/org.eclipse.core.net/natives/unix/linux/libgnomeproxy-1.0.0.so" todir="${buildDirectory}/plugins/org.eclipse.core.net/fragments/org.eclipse.core.net.linux.${buildArch}/">
		</move>-->
		<!-- build libupdate -->
		<ant dir="${buildDirectory}/plugins/org.eclipse.update.core.linux/src" antfile="build.xml" />

		<echo file="compilelibs-stamp" />
	</target>

	<target name="p2prep" depends="build" unless="p2prep.complete">
		<!--<property name="builtZip" value="${buildDirectory}/${buildLabel}/${featureToBuild}-${buildId}-group.group.group.zip" />-->
		<!-- archiveName is set in the build config's customTargets.xml -->
		<!-- FIXME buildLabel should be used here but it's not defined so we cheat and use I.${buildId} instead. -->
		<property name="builtZip" value="${buildDirectory}/I.${buildId}/eclipse-SDK-${buildId}.zip"/>
		<!--<property name="builtZip" value="${basedir}/eclipse-SDK-${buildId}.zip"/>-->
		<replace token="@qualifier@" file="${productFiles}/sdk/sdk.product" value="${buildId}" />
		<property name="tempexec" value="${buildDirectory}/tempexec" />

		<antcall target="createRepo"/>

		<copy file="${reposource}/content.xml" tofile="${reposource}/content.xml.orig" failonerror="false"/>

		<antcall target="extractLauncher"/>
		<antcall target="publishLauncher"/>

		<copy file="${reposource}/content.xml" tofile="${reposource}/content.xml.afterlauncher" failonerror="false"/>
		<copy file="${reposource}/content.jar" tofile="${reposource}/content.jar.afterlauncher" failonerror="false"/>

		<antcall target="createAndPublishLauncherFeature"/>

		<copy file="${reposource}/content.xml" tofile="${reposource}/content.xml.afterrcpConfig" failonerror="false"/>
		<copy file="${reposource}/content.jar" tofile="${reposource}/content.jar.afterrcpConfig" failonerror="false"/>

		<antcall target="publishSDK"/>

		<echo file="p2prep-stamp" />
	</target>

	<target name="createRepo">
		<delete dir="${reposource}" />
		<mkdir dir="${reposource}" />
		<echo message="Unzipping ${builtZip} into ${reposource}" />
		<exec executable="unzip" dir=".">
			<arg line="-q ${builtZip} -d ${reposource}" />
		</exec>
	</target>

	<target name="extractLauncher">
		<delete dir="${tempexec}" />
		<mkdir dir="${tempexec}" />

		<copy todir="${tempexec}">
			<fileset dir="${reposource}">
				<include name="features/org.eclipse.equinox.executable_*.jar" />
			</fileset>
		</copy>

		<exec executable="unzip" dir="${tempexec}">
			<arg line="-q features/*.jar -d ${tempexec}" />
		</exec>
	</target>

	<target name="publishLauncher">
		<!-- Do we need a full path for ${reposource}?
		<property name="buildDirectoryAbsoluteTemp" value="${buildDirectory}/absolutetemp.txt" />
		<echo message="${reposource}" file="${buildDirectoryAbsoluteTemp}" />
		<replaceregexp file="${buildDirectoryAbsoluteTemp}" match="org.eclipse.releng.eclipsebuilder/../src/" replace="src/" />
		<loadfile property="buildDirectoryAbsolute" srcFile="${buildDirectoryAbsoluteTemp}" failonerror="false" />
		<delete file="${buildDirectoryAbsoluteTemp}" />
		-->

		<!-- This next part merges metadata for the launcher binary into the rest of the metadata -->
		<java classname="org.eclipse.equinox.launcher.Main"
		      fork="true"
		      dir="${basedir}"
		      failonerror="true">
			<classpath>
				<pathelement path="bootstrap/plugins/org.eclipse.equinox.launcher.jar" />
			</classpath>
			<arg line="-configuration configuration " />
			<arg line="-application org.eclipse.ant.core.antRunner " />
			<arg line="-buildfile ${tempexec}/build.xml" />
			<arg line="-propertyfile ${basedir}/build.properties " />
			<arg line="-Dbuilder=${buildConfig} " />
			<arg line="-DbuildDirectory=${buildDirectory} " />
			<arg line="-Dp2.gathering=true " />
			<arg line="-Dp2.build.repo=file:/${reposource} " />
			<arg line="-consolelog " />
			<arg line="publish.bin.parts " />
		</java>
	</target>

	<target name="createAndPublishLauncherFeature">
		<!--
			<jvmarg value="-Xdebug"/>
			<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=40000"/>

			<jvmarg value="-Xdebug"/>
			<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=40001"/>
		-->

		<!-- This next part creates and publishs a feature including the binary launcher -->
		<java classname="org.eclipse.equinox.launcher.Main"
		      fork="true"
		      dir="${productFiles}/rcpConfig"
		      failonerror="true">
			<classpath>
				<pathelement path="bootstrap/plugins/org.eclipse.equinox.launcher.jar" />
			</classpath>
			<arg line="-configuration configuration " />
			<arg line="-application org.eclipse.ant.core.antRunner " />
			<arg line="-buildfile buildConfiguration.xml" />
			<arg line="-propertyfile ${basedir}/build.properties " />
			<arg line="-Dconfigs=linux,gtk,${buildArch} " />
			<arg line="-Dreposource=${reposource} " />
			<arg line="-Dbasedir=${productFiles}/rcpConfig" />
			<arg line="-DbuildId=${buildId} " />
			<arg line="-DbaseBuildPath=${buildDirectory} " />
			<arg line="-Declipse.pdebuild.scripts=${eclipse.pdebuild.scripts} " />
			<arg line="-consolelog " />
		</java>

		<!--
		<ant target="main" antfile="buildConfiguration.xml" dir="${productFiles}/rcpConfig" />
		-->
	</target>

	<target name="publishSDK">
		<!-- This next part publishes the entire SDK -->
		<java classname="org.eclipse.equinox.launcher.Main"
		      fork="true"
		      dir="${basedir}"
		      failonerror="true">
			<classpath>
				<pathelement path="bootstrap/plugins/org.eclipse.equinox.launcher.jar" />
			</classpath>
			<arg line="-configuration configuration " />
			<arg line="-application org.eclipse.ant.core.antRunner " />
			<arg line="-buildfile publishProduct.xml" />
			<arg line="-propertyfile ${basedir}/build.properties " />
			<arg line="-DbuildArch=${buildArch} " />
			<arg line="-Dreposource=${reposource} " />
			<arg line="-DbuildConfig=${buildConfig} " />
			<arg line="-DproductFiles=${productFiles} " />
			<arg line="-DbuildDirectory=${buildDirectory} " />
			<arg line="-consolelog " />
		</java>
	</target>

	<target name="provision.sdk" depends="p2prep" unless="provision.sdk.complete">
		<echo message="Installing into:  ${buildDirectory}/installation"/>
		<antcall target="run.director">
			<param name="p2.director.installIU" value="org.eclipse.sdk.ide" />
			<param name="p2.director.version" value="3.5.0.${buildId}" />
			<param name="p2.director.profile" value="SDKProfile" />
			<param name="p2.director.install.path" value="${buildDirectory}/installation" />
			<param name="p2.director.extraArgs" value="-profileProperties org.eclipse.update.install.features=true" />
			<param name="p2.os" value="linux" />
			<param name="p2.ws" value="gtk" />
			<param name="p2.arch" value="${buildArch}" />
			<param name="p2.repo" value="${reposource}" />
		</antcall>
		<echo file="provision.sdk-stamp" />
	</target>

	<target name="provision.tests" depends="buildTests" unless="provision.tests.complete">
		<mkdir dir="${buildDirectory}/testsInstallation"/>
		<exec executable="cp">
			<arg value="-rf"/>
			<arg value="--no-target-directory" />
			<arg value="${buildDirectory}/installation" />
			<arg value="${buildDirectory}/testsInstallation/eclipse" />
		</exec>
		<!-- To prevent contamination for those with test framework installed on their system -->
		<exec executable="/bin/sed">
			<arg value="-i"/>
			<arg value="/dropins/d" />
			<arg value="${buildDirectory}/testsInstallation/eclipse/eclipse.ini" />
		</exec>
		<!--
		<echo message="Installing test framework into:  ${buildDirectory}/testsInstallation"/>
		<antcall target="run.director">
			<param name="p2.director.installIU" value="org.eclipse.test.feature.group" />
			<param name="p2.director.profile" value="SDKProfile" />
			<param name="p2.director.install.path" value="${buildDirectory}/testsInstallation" />
			<param name="p2.director.extraArgs" value="-profileProperties org.eclipse.update.install.features=true" />
			<param name="p2.os" value="linux" />
			<param name="p2.ws" value="gtk" />
			<param name="p2.arch" value="${buildArch}" />
			<param name="p2.repo" value="${testsBuildDirectory}/buildRepo" />
		</antcall>
-->
		<echo message="Installing SDK tests into:  ${buildDirectory}/testsInstallation"/>
		<antcall target="run.installed.director">
			<param name="directorToRun" value="${buildDirectory}/testsInstallation/eclipse/eclipse" />
			<param name="p2.director.installIU" value="org.eclipse.sdk.tests.feature.group" />
			<param name="p2.director.profile" value="SDKProfile" />
			<param name="p2.director.install.path" value="${buildDirectory}/testsInstallation/eclipse" />
			<param name="p2.director.extraArgs" value="-profileProperties org.eclipse.update.install.features=true" />
			<param name="p2.os" value="linux" />
			<param name="p2.ws" value="gtk" />
			<param name="p2.arch" value="${buildArch}" />
			<param name="p2.repo" value="${testsBuildDirectory}/buildRepo" />
		</antcall>
		<exec executable="cp">
			<arg value="-p"/>
			<arg value="${basedir}/genReport.xml" />
			<arg value="${buildDirectory}/testsInstallation" />
		</exec>
		<exec executable="cp">
			<arg value="-p"/>
			<arg value="${basedir}/runtests.sh" />
			<arg value="${buildDirectory}/testsInstallation" />
		</exec>
		<exec executable="cp">
			<arg value="-p"/>
			<arg value="${basedir}/eclipse-tests-vncpwd" />
			<arg value="${buildDirectory}/testsInstallation" />
		</exec>
		<echo file="provision.tests-stamp" />
	</target>

	<target name="runTests" depends="provision.tests">
		<tstamp>
			<format property="timestamp" pattern="yyyyMMddhhmmss"/>
		</tstamp>
		<exec executable="${buildDirectory}/testsInstallation/runtests.sh" dir="${buildDirectory}/testsInstallation">
			<arg line="-t ${timestamp}"/>
		</exec>
		<copy failonerror="false" todir="${basedir}/testResults-${timestamp}">
			<fileset dir="${buildDirectory}/testsInstallation/results-${timestamp}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<target name="run.director">
		<property name="baseBuilderConfig" value="${baseBuilder}/p2"/>
		<echo message="Moving ${baseBuilderConfig} to ${baseBuilderConfig}.bak"/>
		<move failonerror="false" file="${baseBuilderConfig}" tofile="${baseBuilderConfig}.bak" />
		<!-- FIXME:  When we move to bootstrap by default, investigate using <exec> on the bootstrapped launcher
		     like in eclipsebuilder's equinox.prov/run.xml -->
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" dir="${baseBuilder}" failonerror="true">
			<classpath>
				<pathelement location="${launcher}" />
			</classpath>
			<arg line="-data ${buildworkspace} " />
			<arg line="-application org.eclipse.equinox.p2.director " />
			<arg line="-consoleLog" />
			<!--<arg line="-help" />-->
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-installIU ${p2.director.installIU}" />
			<arg line="-p2.os ${p2.os}" />
			<arg line="-p2.ws ${p2.ws}" />
			<arg line="-p2.arch ${p2.arch}" />
			<arg line="-roaming" />
			<arg line="-profile ${p2.director.profile}" />
			<arg line="${p2.director.extraArgs}" />
			<arg line="-metadatarepository file:${p2.repo}" />
			<arg line="-artifactrepository file:${p2.repo}" />
			<arg line="-destination ${p2.director.install.path}" />
			<arg line="-bundlepool ${p2.director.install.path}" />
			<arg line="-vmargs" />
			<arg line="-Declipse.p2.data.area=${p2.director.install.path}/p2" />
			<arg line="-Declipse.p2.MD5Check=false" />
			<arg line="-Declipse.p2.profile=@none" />
			<arg line="-Dorg.eclipse.equinox.p2.reconciler.dropins.directory=" />
			<arg line="-propertyfile ${basedir}/build.properties " />
			<!--
			<jvmarg value="-Xms512M" />
			<jvmarg value="-Xmx2048M" />
			<jvmarg value="-XX:MaxPermSize=512M" />
			-->
			<jvmarg value="-Declipse.p2.data.area=${p2.director.install.path}/p2"/>
		</java>
		<delete dir="${baseBuilderConfig}" includeemptydirs="true" failonerror="false" />
		<move file="${baseBuilderConfig}.bak" tofile="${baseBuilderConfig}" />
	</target>

	<target name="run.installed.director">
		<exec executable="${directorToRun}">
			<arg line="-nosplash " />
			<arg line="-application org.eclipse.equinox.p2.director " />
			<arg line="-data ${buildworkspace} " />
			<arg line="-consoleLog" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-installIU ${p2.director.installIU}" />
			<arg line="-p2.os ${p2.os}" />
			<arg line="-p2.ws ${p2.ws}" />
			<arg line="-p2.arch ${p2.arch}" />
			<arg line="-roaming" />
			<arg line="-profile ${p2.director.profile}" />
			<arg line="${p2.director.extraArgs}" />
			<arg line="-metadatarepository file:${p2.repo}" />
			<arg line="-artifactrepository file:${p2.repo}" />
			<arg line="-destination ${p2.director.install.path}" />
			<arg line="-bundlepool ${p2.director.install.path}" />
			<arg line="-vmargs" />
			<arg line="-Declipse.p2.data.area=${p2.director.install.path}/p2" />
			<arg line="-Declipse.p2.MD5Check=false" />
			<arg line="-Declipse.p2.profile=@none" />
			<arg line="-Dorg.eclipse.equinox.p2.reconciler.dropins.directory=" />
			<arg line="-Declipse.p2.data.area=${p2.director.install.path}/p2"/>
			<arg line="-propertyfile ${basedir}/build.properties " />
		</exec>
	</target>

	<target name="install" depends="provision.sdk">
		<mkdir dir="${destDir}${prefix}/${libDir}/eclipse"/>
		<exec executable="cp">
			<arg value="-rf"/>
			<arg value="--no-target-directory" />
			<arg value="${buildDirectory}/installation" />
			<arg value="${destDir}${prefix}/${libDir}/eclipse" />
		</exec>
		<!-- install desktop file -->
		<copy file="eclipse.desktop" todir="${destDir}${prefix}/share/applications" />
		<!-- install icons -->
		<copy file="${buildDirectory}/plugins/org.eclipse.platform/eclipse.png"
				tofile="${destDir}${prefix}/share/icons/hicolor/16x16/apps/eclipse.png" />
		<copy file="${buildDirectory}/plugins/org.eclipse.platform/eclipse32.png"
				tofile="${destDir}${prefix}/share/icons/hicolor/32x32/apps/eclipse.png" />
		<copy file="${buildDirectory}/plugins/org.eclipse.platform/eclipse48.png"
				tofile="${destDir}${prefix}/share/icons/hicolor/48x48/apps/eclipse.png" />
		<echo append="true" file="${destDir}${prefix}/${libDir}/eclipse/eclipse.ini" message="-Dorg.eclipse.equinox.p2.reconciler.dropins.directory=${destDir}${prefix}/share/eclipse/dropins"/>
	</target>

</project>
