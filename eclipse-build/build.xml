<project name="Eclipse SDK build" default="provision.sdk" basedir=".">
	<property name="buildId" value="I20090611-1540" />
	
	<property name="baseBuilder" value="bootstrap" />
	<property name="launcher" value="bootstrap/plugins/org.eclipse.equinox.launcher" />
	<property name="eclipse.pdebuild.scripts" value="bootstrap/plugins/org.eclipse.pde.build/scripts" />

	<property file="build.properties" />
	
	<available file="bootstrap/plugins" property="bootstrapped" value="true" />
	<available file="eclipse-${buildId}-fetched-src.tar.bz2" property="sdkSourcePresent" value="true" />

	<property name="topBuildDir" value="${basedir}/build"/>
	<property name="homeDir" value="${basedir}/home" />
	<property name="baseworkspace" value="${basedir}/baseworkspace" />
	<property name="buildworkspace" value="${basedir}/buildworkspace" />
	
	<target name="bootstrap" unless="bootstrapped">
		<ant antfile="pdebuild.xml" />
	</target>
	
	<target name="fetch" unless="sdkSourcePresent">
		<fail message="SDK source tarball is not present.  Please either download a file such as eclipse-I20090611-1540-fetched-src.tar.bz2 from http://download.eclipse.org/technology/linuxtools/eclipse-build/ or generate one by running ./buildSDKSource.sh."/>
	</target>

	<target name="init" depends="fetch">
		<delete dir="${topBuildDir}" />
		<mkdir dir="${topBuildDir}" />

		<!-- User home used for build -->
		<delete dir="${homeDir}" />
		<mkdir dir="${homeDir}" />

		<!-- Workspaces used for build -->
		<delete dir="${baseworkspace}" />
		<mkdir dir="${baseworkspace}" />
		<delete dir="${buildworkspace}" />
		<mkdir dir="${buildworkspace}" />

		<echo message="Extracting SDK source (tar jxf eclipse-${buildId}-fetched-src.tar.bz2)" />
		<exec dir="${basedir}/build" executable="tar">
			<arg line="jxf ${basedir}/eclipse-${buildId}-fetched-src.tar.bz2" />
		</exec>
		<property name="buildDirectory" value="${basedir}/build/eclipse-${buildId}-fetched-src" />
		
		<property name="buildConfigs" value="${buildDirectory}/buildConfigs" />
		<property name="buildConfig" value="${buildConfigs}/eclipse-build-config" />
		<property name="productFiles" value="${buildConfig}/productFiles" />
		<property name="repo" value="${buildDirectory}/repo" />
		<property name="reposource" value="${buildDirectory}/reposource" />
		
		<delete dir="${buildDirectory}/buildConfigs" />
		<mkdir dir="${buildDirectory}/buildConfigs" />

		<echo message="Copying eclipse-build main feature source" />
		<copy todir="${buildConfigs}/eclipse-build-config">
			<fileset dir="eclipse-build-config"/>
		</copy>
		<echo message="Copying eclipse-build builder" />
		<copy todir="${buildDirectory}/features/eclipse-build-feature">
			<fileset dir="eclipse-build-feature"/>
		</copy>
	</target>

	<target name="clean">
		<delete dir="${homeDir}" />
		<delete dir="${baseworkspace}" />
		<delete dir="${buildworkspace}" />
		<delete dir="${topBuildDir}" />
	</target>

	<target name="insertBuildId" depends="init">
		<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@build@">
			<include name="**/about.mappings" />
		</replace>
		<replace dir="${buildDirectory}" value="${buildId}" token="@build@">
			<include name="**/configuration/config.ini" />
		</replace>
	</target>

	<target name="applyPatches" depends="init">
		<patch patchfile="${basedir}/patches/eclipse-buildswtnatives.patch" dir="${buildDirectory}" strip="0" />
		<patch patchfile="${basedir}/patches/eclipse-swt-buildagainstxulrunner.patch" dir="${buildDirectory}/plugins/org.eclipse.swt/Eclipse SWT PI/gtk/library" strip="3" />
	</target>

	<target name="build" depends="insertBuildId,applyPatches">
		<ant antfile="build.xml" dir="${eclipse.pdebuild.scripts}">
			<property name="arch" value="${buildArch}"/>
			<property name="builder" value="${buildConfig}" />
		</ant>
	</target>

	<target name="compilelibs" >
		<ant antfile="build.xml" target="build.nativeLibraries" dir="${buildDirectory}/plugins/org.eclipse.swt.gtk.linux.${buildArch}" />

		<property name="launcherlibs" value="${buildDirectory}/features/org.eclipse.equinox.executable" />
		<exec dir="${launcherlibs}/library/gtk/" executable="sh" failonerror="true">
			<arg line="build.sh" />
		</exec>
		<copy file="${launcherlibs}/library/gtk/eclipse" todir="${buildDirectory}/eclipse/" />
		<copy file="${launcherlibs}/library/gtk/eclipse" todir="${buildDirectory}/tmp/collected/linux.gtk.${buildArch}/collected" />

		<property name="launcherfragment" value="org.eclipse.equinox.launcher.gtk.linux.${buildArch}" />

		<copy file="${launcherlibs}/library/gtk/eclipse" todir="${buildDirectory}/features/org.eclipse.equinox.executable/contributed/gtk/linux/${buildArch}/" />
		<copy todir="${buildDirectory}/plugins/${launcherfragment}">
			<fileset dir="${launcherlibs}/library/gtk">
				<include name="**/*.so" />
			</fileset>
		</copy>

		<!-- build liblocalfile -->
		<exec dir="${buildDirectory}/plugins/org.eclipse.core.filesystem/natives/unix/linux" executable="make" failonerror="true" />
		<move file="${buildDirectory}/plugins/org.eclipse.core.filesystem/natives/unix/linux/liblocalfile_1_0_0.so" todir="${buildDirectory}/plugins/org.eclipse.core.filesystem.linux.${buildArch}/os/linux/${buildArch}">
		</move>
		<!-- build libupdate -->
		<ant dir="${buildDirectory}/plugins/org.eclipse.update.core.linux/src" antfile="build.xml" />

	</target>

	<target name="p2prep" depends="build">
		<!--<property name="builtZip" value="${buildDirectory}/${buildLabel}/${featureToBuild}-${buildId}-group.group.group.zip" />-->
		<!-- archiveName is set in the build config's customTargets.xml -->
		<!-- FIXME buildLabel should be used here but it's not defined so we cheat and use I.${buildId} instead. -->
		<property name="builtZip" value="${buildDirectory}/I.${buildId}/eclipse-SDK-${buildId}.zip"/>
		<!--<property name="builtZip" value="${basedir}/eclipse-SDK-${buildId}.zip"/>-->
		<replace token="@qualifier@" file="${productFiles}/sdk/sdk.product" value="${buildId}" />

		<delete dir="${repo}" />
		<mkdir dir="${repo}" />
		<delete dir="${reposource}" />
		<mkdir dir="${reposource}" />
		<exec executable="unzip" dir=".">
			<arg line="-q ${builtZip} -d ${reposource}" />
		</exec>
		<property name="tempexec" value="${buildDirectory}/tempexec" />
		<mkdir dir="${tempexec}" />
		<delete dir="${tempexec}" />
		<exec executable="unzip" dir="${reposource}">
			<arg line="features/*.jar -d ${tempexec}" />
		</exec>

		<!-- We need a full path for ${reposource} -->
		<property name="buildDirectoryAbsoluteTemp" value="${buildDirectory}/absolutetemp.txt" />
		<echo message="${reposource}" file="${buildDirectoryAbsoluteTemp}" />
		<replaceregexp file="${buildDirectoryAbsoluteTemp}" match="org.eclipse.releng.eclipsebuilder/../src/" replace="src/" />
		<loadfile property="buildDirectoryAbsolute" srcFile="${buildDirectoryAbsoluteTemp}" failonerror="false" />
		<delete file="${buildDirectoryAbsoluteTemp}" />

		<subant antfile="build.xml" target="publish.bin.parts" buildpath="${tempexec}/build.xml">
			<property name="p2.gathering" value="true" />
			<property name="p2.build.repo" value="file:/${buildDirectoryAbsolute}" />
		</subant>

		<ant target="main" antfile="buildConfiguration.xml" dir="${productFiles}/rcpConfig" />

		<echo message="p2.publish.product being called with:  repository=file:${reposource} productFile=${productFiles}/sdk/sdk.product compress=true" />
		<p2.publish.product flavor="tooling" repository="file:${reposource}" productFile="${productFiles}/sdk/sdk.product" compress="true">
			<config os="linux" ws="gtk" arch="${buildArch}" />
			<advice kind="featureVersions" file="${buildDirectory}/finalFeaturesVersions.properties" />
			<advice kind="pluginVersions" file="${buildDirectory}/finalPluginsVersions.properties" />
		</p2.publish.product>
	</target>

	<target name="provision.sdk" depends="p2prep">
		<antcall target="run.director">
			<param name="p2.director.installIU" value="org.eclipse.sdk.ide" />
			<param name="p2.director.version" value="3.5.0.${buildId}" />
			<param name="p2.director.profile" value="SDKProfile" />
			<param name="p2.director.install.path" value="${buildDirectory}/installation" />
			<param name="p2.director.extraArgs" value="-profileProperties org.eclipse.update.install.features=true" />
			<param name="p2.os" value="linux" />
			<param name="p2.ws" value="gtk" />
			<param name="p2.arch" value="${buildArch}" />
			<param name="p2.repo" value="${reposource}" />
		</antcall>
	</target>

	<target name="run.director">
		<property name="baseBuilderConfig" value="${baseBuilder}/p2"/>
		<move file="${baseBuilderConfig}" tofile="${baseBuilderConfig}.bak" />
		<!-- FIXME:  When we move to bootstrap by default, investigate using <exec> on the bootstrapped launcher
		     like in eclipsebuilder's equinox.prov/run.xml -->
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" dir="${baseBuilder}" failonerror="true">
			<classpath>
				<pathelement location="${launcher}" />
			</classpath>
			<arg line="-data ${buildworkspace} " />
			<arg line="-application org.eclipse.equinox.p2.director.app.application " />
			<arg line="-consoleLog" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-installIU ${p2.director.installIU}" />
			<arg line="-version ${p2.director.version}" />
			<arg line="-p2.os ${p2.os}" />
			<arg line="-p2.ws ${p2.ws}" />
			<arg line="-p2.arch ${p2.arch}" />
			<arg line="-roaming" />
			<arg line="-profile ${p2.director.profile}" />
			<arg line="${p2.director.extraArgs}" />
			<arg line="-metadataRepository file:${p2.repo}" />
			<arg line="-artifactRepository file:${p2.repo}" />
			<arg line="-metadataRepositoryName ${p2.repo.name}" />
			<arg line="-artifactRepositoryName ${p2.repo.name}" />
			<arg line="-destination ${p2.director.install.path}" />
			<arg line="-bundlepool ${p2.director.install.path}" />
			<arg line="-vmargs" />
			<arg line="-Declipse.p2.data.area=${p2.director.install.path}/p2" />
			<arg line="-Declipse.p2.MD5Check=false" />
			<arg line="-Declipse.p2.profile=@none" />
			<arg line="-propertyfile ${basedir}/build.properties " />
			<jvmarg value="-Xms512M" />
			<jvmarg value="-Xmx2048M" />
			<jvmarg value="-XX:MaxPermSize=512M" />
			<jvmarg value="-Declipse.p2.data.area=${p2.director.install.path}/p2"/>
		</java>
		<delete dir="${baseBuilderConfig}" includeemptydirs="true" failonerror="false" />
		<move file="${baseBuilderConfig}.bak" tofile="${baseBuilderConfig}" />
	</target>

</project>
